"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Upload
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")
"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    user(id: ID @eq): User @find
    users: [User!]! @all

    profile(id: ID @eq ): Profile @find
    profiles: [Profile!]! @all

    post(id: ID @eq ): Post @find
    posts: [Post!]! @all

    me: User @auth(guard: "api")

    like(id: ID @eq): Like @find
    likes: [Like] @all
}

type Mutation {
    createUser(
        name: String!  @rules(apply: ["required"])
        username: String! @rules(apply: ["required", "unique:users"])
        email: String! @rules(apply: ["required", "email", "unique:users"])
        password: String! @bcrypt @rules(apply: ["required", "min:8"])

    ): User @create

    login(
        email: String!
        password: String!

    ): String @field(resolver: "AuthMutator@resolve")

    # me: User @auth(guard: "api")

    createProfile(
        description: String
        website: String
        file: Upload
    ): String @field(resolver: "ProfileMutator@create") @middleware(checks: ["auth:api"])

    updateProfile(
        description: String
        website: String
        file: Upload
    ): Profile @field(resolver: "ProfileMutator@update") @middleware(checks: ["auth:api"])

    createPost(
        title: String!
        post: String!
    ): Post @field(resolver: "PostMutator@create") @middleware(checks: ["auth:api"])

    follow(
        following_id: ID!
    ): User @field(resolver: "FollowerMutator@create") @middleware(checks: ["auth:api"])

    unFollow(
        following_id: ID!
    ): User @field(resolver: "FollowerMutator@destroy") @middleware(checks: ["auth:api"])

    addLike(
        post_id: ID!
    ): Int @field(resolver: "LikeMutator@create") @middleware(checks: ["auth:api"])

    removeLike(
        post_id: ID!
    ): Boolean @field(resolver: "LikeMutator@destroy") @middleware(checks: ["auth:api"])

}


type User {
    id: ID!
    name: String!
    email: String!
    username: String!
    posts: [Post] @hasMany
    profile: Profile @hasOne
    followings: [User] @belongsToMany
    followers: [User] @belongsToMany
    # created_at: DateTime!
    # updated_at: DateTime!
}

type Profile {
    id: ID!
    # user_id: ID!
    description: String
    website: String
    user: User! @belongsTo
    photo: Upload
    # created_at: DateTime!
    # updated_at: DateTime!
}

type Post {
    id: ID!
    # user_id: ID!
    title: String!
    post: String!
    created_at: DateTime!
    user: User! @belongsTo
    likes: [Like] @hasMany
    # created_at: DateTime!
    # updated_at: DateTime!
}

# type Follower {
#     name: String!
#     username: String!
#     email: String!
#     id: ID!
#     user: User! @belongsTo
# }
# type Query{
#     users: [User!]! @all
# }
type Like {
    id: ID!
    likes: Int
    liker_id: ID!
    post: Post @belongsTo
}
